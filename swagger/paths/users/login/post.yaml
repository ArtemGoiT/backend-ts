tags:
  - Users
summary: User login
operationId: loginUser
description: 'Login an existing user'
security: []
requestBody:
  content:
    application/json:
      schema:
        type: object
        required:
          - email
          - password
        properties:
          email:
            description: "User's email"
            type: string
            format: email
            example: 'user@gmail.com'
            pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'  # Проверка на формат email
          password:
            description: "User's password"
            type: string
            minLength: 6  # Минимальная длина пароля
            maxLength: 128  # Максимальная длина пароля
            example: '123123'
            pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$'  # Должен содержать как минимум одну заглавную букву, одну строчную букву и одну цифру
responses:
  '200':
    description: User successfully logged in
    content:
      application/json:
        schema:
          oneOf:
            - description: "User data with default values (if the user hasn't changed their profile)"
              type: object
              required:
                - status
                - message
                - data
              properties:
                status:
                  type: integer
                  example: 200
                  description: 'HTTP status code indicating the success of the operation.'
                message:
                  type: string
                  example: 'Successfully logged in the user!'
                  description: 'Message confirming successful login.'
                data:
                  type: object
                  required:
                    - accessToken
                    - user
                  properties:
                    accessToken:
                      type: string
                      example: 'YBi2qJZtTZxXKgWWiPj7GSMRFdCHNUFtwOq8ORqO'
                      description: 'JWT token for authenticated sessions.'
                      pattern: '^[A-Za-z0-9\-_\.]+$'  # Убедитесь, что токен соответствует допустимому формату
                    user:
                      oneOf:
                        - $ref: '../../../components/schemas/users/registerUser.yaml'
                        - $ref: '../../../components/schemas/users/patchUser.yaml'
                      description: 'User information including profile data.'
            - description: 'User data with updated profile information'
              type: object
              required:
                - status
                - message
                - data
              properties:
                status:
                  type: integer
                  example: 200
                  description: 'HTTP status code indicating the success of the operation.'
                message:
                  type: string
                  example: 'Successfully logged in the user!'
                  description: 'Message confirming successful login.'
                data:
                  type: object
                  required:
                    - accessToken
                    - user
                  properties:
                    accessToken:
                      type: string
                      example: 'YBi2qJZtTZxXKgWWiPj7GSMRFdCHNUFtwOq8ORqO'
                      description: 'JWT token for authenticated sessions.'
                      pattern: '^[A-Za-z0-9\-_\.]+$'  # Убедитесь, что токен соответствует допустимому формату
                    user:
                      oneOf:
                        - $ref: '../../../components/schemas/users/registerUser.yaml'
                        - $ref: '../../../components/schemas/users/patchUser.yaml'
                      description: 'User information including profile data.'
  '401':
    $ref: '../../../components/responses/users/401.yaml'
    description: 'Unauthorized - Invalid email or password.'
  '404':
    $ref: '../../../components/responses/users/404.yaml'
    description: 'Not Found - User not found.'
