{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "AquaTrack app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of AquaTrack app"
  },
  "servers": [
    {
      "url": "https://final-project-backend-1-tzfm.onrender.com/"
    },
    {
      "url": "http://localhost:8080"
    }
  ],
  "tags": [
    {
      "name": "Water",
      "description": "Operations about water."
    },
    {
      "name": "Users",
      "description": "Auth operations."
    },
    {
      "name": "Google OAuth",
      "description": "Operations related to Google OAuth authentication."
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration",
        "operationId": "registerUser",
        "description": "Register a new user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "format": "email",
                    "example": "user@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "123123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/registerUser"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "Login an existing user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "format": "email",
                    "example": "user@gmail.com",
                    "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 128,
                    "example": "123123",
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "description": "User data with default values (if the user hasn't changed their profile)",
                      "type": "object",
                      "required": [
                        "status",
                        "message",
                        "data"
                      ],
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 200,
                          "description": "HTTP status code indicating the success of the operation."
                        },
                        "message": {
                          "type": "string",
                          "example": "Successfully logged in the user!",
                          "description": "Message confirming successful login."
                        },
                        "data": {
                          "type": "object",
                          "required": [
                            "accessToken",
                            "user"
                          ],
                          "properties": {
                            "accessToken": {
                              "type": "string",
                              "example": "YBi2qJZtTZxXKgWWiPj7GSMRFdCHNUFtwOq8ORqO",
                              "description": "JWT token for authenticated sessions.",
                              "pattern": "^[A-Za-z0-9\\-_\\.]+$"
                            },
                            "user": {
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/registerUser"
                                },
                                {
                                  "$ref": "#/components/schemas/patchUser"
                                }
                              ],
                              "description": "User information including profile data."
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "User data with updated profile information",
                      "type": "object",
                      "required": [
                        "status",
                        "message",
                        "data"
                      ],
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 200,
                          "description": "HTTP status code indicating the success of the operation."
                        },
                        "message": {
                          "type": "string",
                          "example": "Successfully logged in the user!",
                          "description": "Message confirming successful login."
                        },
                        "data": {
                          "type": "object",
                          "required": [
                            "accessToken",
                            "user"
                          ],
                          "properties": {
                            "accessToken": {
                              "type": "string",
                              "example": "YBi2qJZtTZxXKgWWiPj7GSMRFdCHNUFtwOq8ORqO",
                              "description": "JWT token for authenticated sessions.",
                              "pattern": "^[A-Za-z0-9\\-_\\.]+$"
                            },
                            "user": {
                              "oneOf": [
                                {
                                  "$ref": "#/components/schemas/registerUser"
                                },
                                {
                                  "$ref": "#/components/schemas/patchUser"
                                }
                              ],
                              "description": "User information including profile data."
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401",
            "description": "Unauthorized - Invalid email or password."
          },
          "404": {
            "$ref": "#/components/responses/404",
            "description": "Not Found - User not found."
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Logs out the current user by deleting the session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out, no content returned"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshUserSession",
        "description": "Refreshes the user session by using the provided session ID and refresh token stored in cookies",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "description": "The session ID stored in the cookies."
            },
            "required": true
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "schema": {
              "type": "string",
              "description": "The refresh token stored in the cookies."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "description": "The new access token for the refreshed session",
                          "type": "string",
                          "example": "newAccessTokenValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/data": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get information about the current user",
        "operationId": "getCurrentUser",
        "description": "Retrieves the information of the currently authenticated user. Authentication is required via Bearer token in the Authorization header",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "Status code of the response"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user information",
                      "description": "Message indicating the result of the operation"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "userId",
                        "name",
                        "email",
                        "gender",
                        "weight",
                        "activeSportTime",
                        "dailyNorma",
                        "avatar"
                      ],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "66e4c8a76d2c283aa68ab68f",
                          "description": "Unique identifier for the user"
                        },
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100,
                          "example": "John Doe",
                          "description": "Name of the user"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com",
                          "description": "Email address of the user"
                        },
                        "gender": {
                          "type": "string",
                          "enum": [
                            "woman",
                            "man"
                          ],
                          "example": "woman",
                          "description": "Gender of the user"
                        },
                        "weight": {
                          "type": "number",
                          "format": "float",
                          "example": 70,
                          "minimum": 1,
                          "maximum": 500,
                          "description": "Weight of the user in kilograms"
                        },
                        "activeSportTime": {
                          "type": "number",
                          "format": "float",
                          "example": 1.5,
                          "minimum": 1,
                          "maximum": 24,
                          "description": "Number of hours per week the user is active in sports"
                        },
                        "dailyNorma": {
                          "type": "number",
                          "format": "float",
                          "example": 2,
                          "minimum": 1,
                          "maximum": 10,
                          "description": "Daily water consumption in liters"
                        },
                        "avatar": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://example.com/avatar.jpg",
                          "description": "URL of the user's avatar image"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/users/userId": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Data",
        "operationId": "updateUser",
        "description": "Update user information. Data is taken from the token, so no user ID is needed in the parameters.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The user's email address. Must be a valid email format.",
                    "type": "string",
                    "format": "email",
                    "example": "user@gmail.com"
                  },
                  "name": {
                    "description": "The user's name. Optional. Defaults to 'User' if not provided.",
                    "type": "string",
                    "example": "Masha"
                  },
                  "gender": {
                    "description": "The user's gender. Optional. Defaults to 'woman' if not provided. Must be either 'woman' or 'man'.",
                    "type": "string",
                    "enum": [
                      "woman",
                      "man"
                    ],
                    "example": "woman"
                  },
                  "dailyNorma": {
                    "description": "The user's daily water consumption in liters. Optional. Defaults to '1.5' if not provided.",
                    "type": "number",
                    "format": "float",
                    "example": 1.5,
                    "minimum": 1,
                    "maximum": 10
                  },
                  "weight": {
                    "description": "The user's weight in kilograms. Optional.",
                    "type": "number",
                    "format": "float",
                    "example": 65,
                    "minimum": 1,
                    "maximum": 500
                  },
                  "activeSportTime": {
                    "description": "The time (in hours) the user spends on sports activities per week. Optional.",
                    "type": "number",
                    "format": "float",
                    "example": 5,
                    "minimum": 1,
                    "maximum": 24
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code of the response."
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the user!",
                      "description": "Message indicating the result of the update operation."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/patchUser",
                          "description": "Updated user data."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401",
            "description": "Unauthorized - Invalid or missing token."
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User's Avatar",
        "operationId": "updateUserAvatar",
        "description": "Update the avatar of the currently authenticated user. The user ID is derived from the token, so it is not required in the request parameters. The avatar should be a valid URL to an image or a binary file.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "description": "Link to the user photo or binary file representing the new avatar image.",
                    "type": "string",
                    "format": "binary",
                    "example": "https://example.com/new-avatar.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user’s avatar.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code indicating the success of the operation."
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the user’s avatar!",
                      "description": "Message confirming the successful update of the avatar."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/patchUser",
                          "description": "Updated user information including the new avatar."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401",
            "description": "Unauthorized - Invalid or missing authentication token."
          }
        }
      }
    },
    "/users/count": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get total number of registered users",
        "operationId": "getUsersCount",
        "description": "Returns the total number of registered users in the application",
        "security": [],
        "responses": {
          "200": {
            "description": "Successful operation, returns the total number of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully got total number of registered users!"
                    },
                    "data": {
                      "type": "integer",
                      "example": 76
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/day": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Get water by day",
        "operationId": "getWaterByDay",
        "description": "Get all the water for a specific day of the month and year.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "day",
                  "month",
                  "year"
                ],
                "properties": {
                  "day": {
                    "description": "The day of the water record (in format DD).",
                    "type": "string",
                    "example": "05",
                    "pattern": "^(0[1-9]|[12][0-9]|3[01])$"
                  },
                  "month": {
                    "description": "The month of the water record (in format MM).",
                    "type": "string",
                    "example": "09",
                    "pattern": "^(0[1-9]|1[0-2])$"
                  },
                  "year": {
                    "description": "The year of the water record (in format YYYY).",
                    "type": "string",
                    "example": "2024",
                    "pattern": "^\\d{4}$"
                  }
                }
              }
            }
          },
          "description": "Details to get a water record by day."
        },
        "responses": {
          "200": {
            "description": "Successfully fetched the water consumption data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "resultData"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully fetched the water consumption data!"
                    },
                    "resultData": {
                      "type": "object",
                      "properties": {
                        "records": {
                          "type": "array",
                          "description": "List of water intake records for the day.",
                          "$ref": "#/components/schemas/water"
                        },
                        "totalWater": {
                          "type": "number",
                          "description": "Total water intake for the day in milliliters.",
                          "example": 1500
                        },
                        "dailyNorma": {
                          "type": "number",
                          "description": "User daily water intake goal in milliliters.",
                          "example": 2000
                        },
                        "percentage": {
                          "type": "string",
                          "description": "Percentage of daily water intake goal met.",
                          "example": "75%"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found or day, month, year are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Day, month and year are required!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    },
    "/water/month": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Get water by month",
        "operationId": "getWaterByMonth",
        "description": "Get all the water for a certain month of the year.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "month",
                  "year"
                ],
                "properties": {
                  "month": {
                    "description": "The month of the water record (in format MM).",
                    "type": "string",
                    "example": "09",
                    "pattern": "^(0[1-9]|1[0-2])$"
                  },
                  "year": {
                    "description": "The year of the water record (in format YYYY).",
                    "type": "string",
                    "example": "2024",
                    "pattern": "^\\d{4}$"
                  }
                }
              }
            }
          },
          "description": "Details to get a water record by month."
        },
        "responses": {
          "200": {
            "description": "Successfully fetched the water consumption data for the month.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully fetched the water consumption data!"
                    },
                    "data": {
                      "type": "array",
                      "$ref": "#/components/schemas/water",
                      "description": "List of water intake records for the specified month."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found or month, year are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Month and year are required!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add a new water record",
        "operationId": "addWater",
        "description": "Add a water record with data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount",
                  "day",
                  "month",
                  "year",
                  "time"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of water consumed (in milliliters).",
                    "type": "number",
                    "format": "float",
                    "example": 250,
                    "minimum": 50,
                    "maximum": 10000
                  },
                  "day": {
                    "description": "The day of the water record (in format DD).",
                    "type": "string",
                    "example": "05",
                    "pattern": "^(0[1-9]|[12][0-9]|3[01])$"
                  },
                  "month": {
                    "description": "The month of the water record (in format MM).",
                    "type": "string",
                    "example": "09",
                    "pattern": "^(0[1-9]|1[0-2])$"
                  },
                  "year": {
                    "description": "The year of the water record (in format YYYY).",
                    "type": "string",
                    "example": "2024",
                    "pattern": "^\\d{4}$"
                  },
                  "time": {
                    "description": "The time of the water record (in format HH:mm).",
                    "type": "string",
                    "example": "12:30",
                    "pattern": "^([0-1]\\d|2[0-3]):([0-5]\\d)$"
                  }
                }
              }
            }
          },
          "description": "Details to create a water record."
        },
        "responses": {
          "201": {
            "description": "Water intake record successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added water!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water",
                      "description": "Water record object."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only add water for today date."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    },
    "/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Edit a water by id",
        "operationId": "editWater",
        "description": "Edit a water record by unique identifier.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "66a35382997eac73e992ae30"
            },
            "description": "The unique ID of the water record to edit."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "The amount of water consumed (in milliliters).",
                    "type": "number",
                    "format": "float",
                    "example": 250,
                    "minimum": 50,
                    "maximum": 10000
                  },
                  "day": {
                    "description": "The day of the water record (in format DD).",
                    "type": "string",
                    "example": "05",
                    "pattern": "^(0[1-9]|[12][0-9]|3[01])$"
                  },
                  "month": {
                    "description": "The month of the water record (in format MM).",
                    "type": "string",
                    "example": "09",
                    "pattern": "^(0[1-9]|1[0-2])$"
                  },
                  "year": {
                    "description": "The year of the water record (in format YYYY).",
                    "type": "string",
                    "example": "2024",
                    "pattern": "^\\d{4}$"
                  },
                  "time": {
                    "description": "The time of the water record (in format HH:mm).",
                    "type": "string",
                    "example": "12:30",
                    "pattern": "^([0-1]\\d|2[0-3]):([0-5]\\d)$"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "description": "Fields to be edited for the water record. Only the fields provided will be edited."
        },
        "responses": {
          "200": {
            "description": "Water intake record successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully edit the water record!"
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated water record object.",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data for the update request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid input data."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-4"
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete a water by id",
        "operationId": "deleteWater",
        "description": "Delete a water by unique identifier",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "66c6fd636a79689916340fe7"
            },
            "description": "The unique ID of the water to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - No Content. The water was deleted successfully."
          },
          "404": {
            "$ref": "#/components/responses/404-4"
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    },
    "/users/get-oauth-url": {
      "get": {
        "tags": [
          "Google OAuth"
        ],
        "summary": "Get Google OAuth URL",
        "description": "Generates a URL for user authentication via Google.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved Google OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    },
    "/users/confirm-oauth": {
      "post": {
        "tags": [
          "Google OAuth"
        ],
        "summary": "Confirm Google OAuth code",
        "description": "Confirms the OAuth code received from Google and creates a user session.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The code received from Google after successful authorization",
                    "example": "4/0AY0e-g7..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in via Google OAuth",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in via Google OAuth!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The access token for the session",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – Missing or malformed request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing or invalid request data"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized – Invalid or expired Google OAuth code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired Google OAuth code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500-0"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "registerUser": {
        "type": "object",
        "required": [
          "_id",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "66e69d630a8a440495bed3cc",
            "pattern": "^[a-fA-F0-9]{24}$"
          },
          "name": {
            "description": "User's name (optional, defaults to 'User')",
            "type": "string",
            "example": "Masha",
            "maxLength": 100
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "user@gmail.com",
            "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
          },
          "gender": {
            "description": "User's gender (optional, defaults to 'woman')",
            "type": "string",
            "enum": [
              "woman",
              "man"
            ],
            "example": "woman"
          },
          "weight": {
            "description": "User's weight (optional, defaults to '50')",
            "type": "number",
            "example": 50,
            "minimum": 0,
            "maximum": 500
          },
          "activeSportTime": {
            "description": "User's time of active participation in sports (hours per week)",
            "type": "number",
            "example": 5,
            "minimum": 1,
            "maximum": 24
          },
          "dailyNorma": {
            "description": "User's daily water consumption in liters (optional, defaults '1.5')",
            "type": "number",
            "example": 1.5,
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "patchUser": {
        "type": "object",
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "66e69d630a8a440495bed3cc",
            "pattern": "^[a-fA-F0-9]{24}$"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "user@gmail.com",
            "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
          },
          "name": {
            "description": "User's name (optional, defaults to 'User')",
            "type": "string",
            "example": "Masha",
            "maxLength": 100
          },
          "gender": {
            "description": "User's gender (optional, defaults to 'woman')",
            "type": "string",
            "enum": [
              "woman",
              "man"
            ],
            "example": "woman"
          },
          "dailyNorma": {
            "description": "User's daily water consumption in liters (optional, defaults '1.5')",
            "type": "number",
            "example": 1.5,
            "minimum": 1,
            "maximum": 10
          },
          "weight": {
            "description": "User's weight in kilograms",
            "type": "number",
            "example": 65,
            "minimum": 1,
            "maximum": 500
          },
          "activeSportTime": {
            "description": "User's time of active participation in sports (hours per week)",
            "type": "number",
            "example": 5,
            "minimum": 1,
            "maximum": 24
          },
          "avatar": {
            "description": "Link to user photo",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/user-avatar.jpg",
            "pattern": "^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$"
          }
        }
      },
      "water": {
        "type": "object",
        "required": [
          "_id",
          "amount",
          "day",
          "month",
          "year",
          "time",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Backend-generated unique identifier for the water record.",
            "type": "string",
            "format": "objectId",
            "example": "66a35382997eac73e992ae30",
            "pattern": "^[a-fA-F0-9]{24}$"
          },
          "amount": {
            "description": "The amount of water consumed (in milliliters).",
            "type": "number",
            "format": "float",
            "example": 250,
            "minimum": 50,
            "maximum": 10000
          },
          "day": {
            "description": "The day of the water record (in format DD).",
            "type": "string",
            "example": "05",
            "pattern": "^(0[1-9]|[12][0-9]|3[01])$"
          },
          "month": {
            "description": "The month of the water record (in format MM).",
            "type": "string",
            "example": "09",
            "pattern": "^(0[1-9]|1[0-2])$"
          },
          "year": {
            "description": "The year of the water record (in format YYYY).",
            "type": "string",
            "example": "2024",
            "pattern": "^\\d{4}$"
          },
          "time": {
            "description": "The time of the water record (in format HH:mm).",
            "type": "string",
            "example": "12:30",
            "pattern": "^([0-1]\\d|2[0-3]):([0-5]\\d)$"
          },
          "userId": {
            "description": "Unique identifier for the user who owns this water record.",
            "type": "string",
            "format": "objectId",
            "example": "66c6fd636a79689916340fe7",
            "pattern": "^[a-fA-F0-9]{24}$"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Email already exists",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      },
      "500-0": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "An unexpected error occurred."
                }
              }
            }
          }
        }
      },
      "404-4": {
        "description": "Water record not found!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Water not found!"
                }
              }
            }
          }
        }
      }
    }
  }
}